{"version":3,"file":"component---src-pages-404-tsx-d3c493259d0ecd3d8be7.js","mappings":"iMAcO,MAAMA,GAAK,kJAQLC,GAAO,2FAqBpB,MAhB4C,EAC1CC,MAAAA,EAAOC,QAAAA,EACPC,OACEC,iBAAmBC,MAAAA,QAGnB,uBACE,QAAC,IAAD,CAAKA,MAAOA,EAAOC,IAAKL,KACxB,2BACE,QAACF,EAAD,KAAQE,IACR,QAACD,EAAD,KAAUE,KCTX,MAAMK,GAAQ,qMAaRC,GAAS,4RA+CtB,MAhCoC,EAAGC,OAAAA,MACrC,MAAMC,GAAQC,EAAAA,EAAAA,UACZ,IACEF,EAAOG,QACL,EACEC,MACEC,aAAeC,KAAAA,OAEFA,EAAKC,SAAS,YAEnC,CAACP,IAGH,OACE,yBACE,QAACF,EAAD,yBACA,QAACC,EAAD,KACGE,EAAMO,KACL,EACEJ,MACEC,aAAeb,MAAAA,EAAOE,MAAAA,EAAOD,QAAAA,GAC7BO,QAAUS,KAAAA,QAGZ,QAAC,EAAD,CAAWC,IAAKD,EAAMjB,MAAOA,EAAOE,MAAOA,EAAOD,QAASA,U,4IC1DvE,MAmEMkB,EAAY,gRAwBZC,GAAS,oDAGJC,EAAAA,EAAAA,UAHI,kHAcTC,GAAgB,mDAGXD,EAAAA,EAAAA,QAHW,mHAchBE,EAAS,8DAKf,UA5HsDC,IACpD,MAAM,MAAEC,GAAUD,EAAME,KAAKC,kBAE7B,OACE,QAAC,IAAD,MACE,QAAC,IAAD,MACE,kBAAQC,IAAG,CAAGC,EAAAA,GAAYC,EAAAA,GAAf,SACT,eAAKF,IAAG,CAAGE,EAAAA,GAAOC,EAAAA,GAAV,SACN,eAAKH,IAAKI,EAAAA,KACR,QAAC,IAAD,CAASC,QAAQ,QAIvB,gBAAMC,GAAG,YAAYN,IAAG,CAAGE,EAAAA,GAAOX,EAAV,OAAyBgB,UAAU,kBACzD,eAAKP,IAAG,CAAGI,EAAAA,GAAH,SACN,mBAASI,MAAO,CAAEC,UAAW,SAAUC,aAAc,UACnD,QAAClB,EAAD,aACA,QAACE,EAAD,wBACA,QAAC,KAAD,CAAMM,IAAKL,EAAWgB,GAAG,KAAzB,4BAIF,oBACE,QAAC,KAAD,CAAO/B,OAAQiB,QAIrB,QAAC,IAAD","sources":["webpack://scalar-webpage/./src/components/FieldItem.tsx","webpack://scalar-webpage/./src/components/Field.tsx","webpack://scalar-webpage/./src/pages/404.tsx"],"sourcesContent":["import React from 'react';\r\nimport styled from '@emotion/styled';\r\nimport Img, { FluidObject } from 'gatsby-image';\r\n\r\ninterface FieldItemProps{\r\n  title: string;\r\n  excerpt: string;\r\n  image: {\r\n    childImageSharp: {\r\n      fluid: FluidObject;\r\n    };\r\n  };\r\n}\r\n\r\nexport const Title = styled.span`\r\n  display: block;\r\n  text-align: center;\r\n  font-size: 2rem;\r\n  font-weight: 500;\r\n  margin: 2rem 1rem 1rem;\r\n`;\r\n\r\nexport const Excerpt = styled.p`\r\n  color: #757575;\r\n  margin: 0 2rem 2rem;\r\n`;\r\n\r\nconst FieldItem: React.FC<FieldItemProps> = ({\r\n  title, excerpt,\r\n  image: {\r\n    childImageSharp: { fluid },\r\n  } }) => {\r\n  return (\r\n    <figure>\r\n      <Img fluid={fluid} alt={title} />\r\n      <figcaption>\r\n        <Title>{title}</Title>\r\n        <Excerpt>{excerpt}</Excerpt>\r\n      </figcaption>\r\n    </figure>\r\n  );\r\n};\r\n\r\nexport default FieldItem;\r\n","import React, { useMemo } from 'react';\r\nimport FieldItem from './FieldItem';\r\nimport styled from '@emotion/styled';\r\nimport { FluidObject } from 'gatsby-image';\r\n\r\nexport interface FieldType {\r\n  node: {\r\n    frontmatter: {\r\n      title: string;\r\n      type: string;\r\n      index: number;\r\n      excerpt: string;\r\n      image: {\r\n        childImageSharp: {\r\n          fluid: FluidObject;\r\n        };\r\n      };\r\n    };\r\n    fields: {\r\n      slug: string;\r\n    };\r\n  };\r\n}\r\n\r\ninterface FieldProps{\r\n  fields: FieldType[];\r\n}\r\n\r\nexport const BigTitle = styled.span`\r\n  display: flex;\r\n  width: 100%;\r\n  font-size: 3rem;\r\n  font-weight: 500;\r\n  margin: 3rem 4rem 1rem;\r\n  padding: 1rem;\r\n\r\n  @media (max-width: 500px) {\r\n    font-size: 2.5rem;\r\n  }\r\n`;\r\n\r\nexport const Container = styled.div`\r\n  display: grid;\r\n  grid-template-columns: repeat(3, 1fr);\r\n  grid-gap: 4rem;\r\n  padding: 0 2rem;\r\n  margin: 4rem 1rem 6rem;\r\n  text-align: center;\r\n\r\n  @media (max-width: 900px) {\r\n    grid-template-rows: 1fr 1fr 1fr;\r\n    grid-template-columns: 1fr;\r\n    grid-row-gap: 30px;\r\n  }\r\n`;\r\n\r\nconst Field: React.FC<FieldProps> = ({ fields }) => {\r\n  const field = useMemo(\r\n    () =>\r\n      fields.filter(\r\n        ({\r\n          node: {\r\n            frontmatter: { type },\r\n          },\r\n        }: FieldType) => type.includes('field'),\r\n      ),\r\n    [fields],\r\n  );\r\n\r\n  return (\r\n    <>\r\n      <BigTitle>Research Topics</BigTitle>\r\n      <Container>\r\n        {field.map(\r\n          ({\r\n            node: {\r\n              frontmatter: { title, image, excerpt },\r\n              fields: { slug },\r\n            },\r\n          }: FieldType) => (\r\n            <FieldItem key={slug} title={title} image={image} excerpt={excerpt} />\r\n          ),\r\n        )}\r\n      </Container>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Field;\r\n","import { graphql, Link } from 'gatsby';\r\nimport React from 'react';\r\n\r\nimport { css } from '@emotion/react';\r\nimport styled from '@emotion/styled';\r\n\r\nimport SiteNav from '../components/header/SiteNav';\r\nimport { Wrapper } from '../components/Wrapper';\r\nimport IndexLayout from '../layouts';\r\nimport { colors } from '../styles/colors';\r\nimport { inner, outer, SiteHeader, SiteNavMain } from '../styles/shared';\r\nimport { Footer } from '../components/Footer';\r\nimport Field, { FieldType } from '../components/Field';\r\n\r\ninterface NotFoundTemplateProps {\r\n  data: {\r\n    allMarkdownRemark: {\r\n      edges: FieldType[];\r\n    };\r\n  };\r\n}\r\n\r\nconst NotFoundPage: React.FC<NotFoundTemplateProps> = props => {\r\n  const { edges } = props.data.allMarkdownRemark;\r\n\r\n  return (\r\n    <IndexLayout>\r\n      <Wrapper>\r\n        <header css={[SiteHeader, outer]}>\r\n          <div css={[outer, SiteNavMain]}>\r\n            <div css={inner}>\r\n              <SiteNav isHome={false} />\r\n            </div>\r\n          </div>\r\n        </header>\r\n        <main id=\"site-main\" css={[outer, ErrorContent]} className=\"error-content\">\r\n          <div css={[inner]}>\r\n            <section style={{ textAlign: 'center', marginBottom: '80px' }}>\r\n              <ErrorCode>404</ErrorCode>\r\n              <ErrorDescription>Page not found</ErrorDescription>\r\n              <Link css={ErrorLink} to=\"/\">\r\n                Go to the front page â†’\r\n              </Link>\r\n            </section>\r\n            <div>\r\n              <Field fields={edges}/>\r\n            </div>\r\n          </div>\r\n        </main>\r\n        <Footer/>\r\n      </Wrapper>\r\n    </IndexLayout>\r\n  );\r\n};\r\n\r\nexport const pageQuery = graphql`\r\n  query {\r\n    allMarkdownRemark(\r\n      filter: { frontmatter: { type: { ne: null } } }\r\n      sort: { fields: frontmatter___index, order: ASC }\r\n    ) {\r\n      edges {\r\n        node {\r\n          frontmatter {\r\n            title\r\n            type\r\n            index\r\n            excerpt\r\n            image {\r\n              childImageSharp {\r\n                fluid(\r\n                  maxWidth: 3080\r\n                  maxHeight: 1000\r\n                  fit: INSIDE\r\n                  quality: 100) {\r\n                  ...GatsbyImageSharpFluid\r\n                }\r\n              }\r\n            }\r\n          }\r\n          fields {\r\n            slug\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst ErrorContent = css`\r\n  padding: 12vw 4vw 6vw;\r\n\r\n  @media (max-width: 1000px) {\r\n    padding-top: 14vw;\r\n  }\r\n\r\n  @media (max-width: 800px) {\r\n    padding-top: 18vw;\r\n  }\r\n\r\n  @media (max-width: 500px) {\r\n    padding-top: 25vw;\r\n  }\r\n\r\n  @media (min-width: 940px) {\r\n    .post-card {\r\n      margin-bottom: 0;\r\n      padding-bottom: 0;\r\n      border-bottom: none;\r\n    }\r\n  }\r\n`;\r\n\r\nconst ErrorCode = styled.h1`\r\n  margin: 0;\r\n  /* color: var(--lightgrey); */\r\n  color: ${colors.lightgrey};\r\n  font-size: 12vw;\r\n  line-height: 1em;\r\n  letter-spacing: -5px;\r\n  opacity: 0.75;\r\n\r\n  @media (max-width: 800px) {\r\n    font-size: 11.2rem;\r\n  }\r\n`;\r\n\r\nconst ErrorDescription = styled.p`\r\n  margin: 0;\r\n  /* color: var(--midgrey); */\r\n  color: ${colors.midgrey};\r\n  font-size: 3rem;\r\n  line-height: 1.3em;\r\n  font-weight: 400;\r\n\r\n  @media (max-width: 800px) {\r\n    margin: 5px 0 0 0;\r\n    font-size: 1.8rem;\r\n  }\r\n`;\r\n\r\nconst ErrorLink = css`\r\n  display: inline-block;\r\n  margin-top: 5px;\r\n`;\r\n\r\nexport default NotFoundPage;\r\n"],"names":["Title","Excerpt","title","excerpt","image","childImageSharp","fluid","alt","BigTitle","Container","fields","field","useMemo","filter","node","frontmatter","type","includes","map","slug","key","ErrorContent","ErrorCode","colors","ErrorDescription","ErrorLink","props","edges","data","allMarkdownRemark","css","SiteHeader","outer","SiteNavMain","inner","isHome","id","className","style","textAlign","marginBottom","to"],"sourceRoot":""}